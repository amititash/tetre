#!/usr/bin/env python

import sys
import argparse
import os


def argparser(argv):
    """The command line options for TETRE.

    Subcommands are used for the different tasks.

    Args:
        args: The command line params from default Python argv.

    Returns:
        obj: The command line parameters.

    """

    args = argv[1:]

    ap = argparse.ArgumentParser(description='TETRE, a humble Toolit for Exploring Text for Relation Extraction')
    subap = ap.add_subparsers(dest='subap')

    ap_setup = subap.add_parser('setup', help='Generate needed setup folders')
    ap_setup.add_argument('--reset', action='store_true', help='Clean all working data. (Not recommended).')

    ap_download = subap.add_parser('download', help='Download content from a given server (originally developed for ' +
                                                    'internal UNSW server only)')
    ap_download_required = ap_download.add_argument_group('required arguments')
    ap_download_required.add_argument('--url', help='Where to download from.', required=True)

    ap_train = subap.add_parser('train', help='Train models for supported workflows.')
    ap_train.add_argument('--workflow', choices=['brat_to_stanford'],
                          default='brat_to_stanford', help='Supported workflows.')

    ap_compile = subap.add_parser('compile', help='Re-compile code for supported workflows.')
    ap_compile.add_argument('--workflow', choices=['brat_to_stanford'],
                          default='brat_to_stanford', help='Supported workflows.')

    parsed = ap.parse_args(args)
    parsed.root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    return parsed


def tetre(argv):
    """Entry point for the TETRE program.

    Args:
        argv: The command line params from default Python argv.

    """

    # parse command line
    ap = argparser(argv)

    # add ability to import packages from re-organised folders without
    # adding them to PYTHONPATH
    bin_dir = ap.root_dir + '/bin/'
    lib_dir = ap.root_dir + '/lib/'
    external_lib_dir = ap.root_dir + '/external/lib/'

    sys.path.insert(0, bin_dir)
    sys.path.insert(0, lib_dir)
    sys.path.insert(0, external_lib_dir)

    if ap.subap == 'setup':
        import setup
        setup.start(ap)

    if ap.subap == 'download':
        import download
        download.start(ap)

    if ap.subap == 'train':
        import train
        train.start(ap)

    if ap.subap == 'compile':
        import compile
        compile.start(ap)


if __name__ == '__main__':
    sys.exit(tetre(sys.argv))